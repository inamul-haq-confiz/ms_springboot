package com.photoapp.api.gateway;

import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.stereotype.Component;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;

@Component
public class AuthorizationHeaderFilter extends AbstractGatewayFilterFactory<AuthorizationHeaderFilter.Config> {

	public static class Config
	{
		
	}

	@Override
	public GatewayFilter apply(Config config) {
		return (exchange, chain)->{
			var request = exchange.getRequest();
			
			//if(!request.getHeaders().containsKey("Authorization")) {
			if(!request.getHeaders().containsKey(HttpHeaders.AUTHORIZATION)) {
				return onError(exchange, "No authorization header", HttpStatus.UNAUTHORIZED);
			}
			
			String authorizationHeader = request.getHeaders().get(HttpHeaders.AUTHORIZATION).get(0);
			//get rid of the Bearer prefix and get the jwt token:
			String jwt = authorizationHeader.replace("Bearer", "");
			
			if(!isJwtValid(jwt)) {
				return onError(exchange, "Jwt token is not valid", HttpStatus.UNAUTHORIZED);
			}
			
			return chain.filter(exchange);
			};
	}
}
