package com.test.demo.controllers;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;

import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import javax.security.auth.login.CredentialNotFoundException;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;

import com.test.demo.constants.Messages;
import com.test.demo.controller.AccountsController;
import com.test.demo.controller.ProductsController;
import com.test.demo.dtos.ProductDto;
import com.test.demo.dtos.TokenDto;
import com.test.demo.dtos.UserDto;
import com.test.demo.dtos.response.ResponseDto;
import com.test.demo.model.Product;
import com.test.demo.repository.ProductRepository;
import com.test.demo.services.AccountsService;
import com.test.demo.services.AuthenticationService;
import com.test.demo.services.ProductService;

@SpringBootTest
public class AccountsControllerTests {
   
	@MockBean
    private AuthenticationService authService;	
	@MockBean
	private AccountsService accService;   
	
    @Autowired
    private AccountsController controller;  
    
    @Test
    @DisplayName("Test login Success")
    void testGetAll() throws CredentialNotFoundException {
    	
    	var token = new TokenDto("tokenxyz@test", new Date(System.currentTimeMillis()), new Date(System.currentTimeMillis()+ 10000));
    	
    	when(authService.authenticate(any(), any())).thenReturn(token);

        // Execute the service call
        var response = controller.login(any(),any());

        // Assert the response

        Assertions.assertNotNull(response, "No user found");
        Assertions.assertNotNull(response.getBody());
        Assertions.assertEquals(((ResponseDto) response.getBody()).getStatusCode(), HttpStatus.OK.toString());

    }
    
    @Test
    @DisplayName("Test register Success")
    void testAddProduct() {
    	
    	var user =  new UserDto("username", "password", "fullname");
    //	var savedProduct =  new ProductDto("1", productDto.getTitle(), productDto.getDescription(), productDto.getImage() ,productDto.getPrice());

    	when(accService.register(any())).thenReturn(true);

        // Execute the service call
        var response = controller.register(user);

        // Assert the response
        Assertions.assertNotNull(response);
        Assertions.assertNotNull(response.getBody());
        Assertions.assertEquals(((ResponseDto) response.getBody()).getStatusCode(), HttpStatus.CREATED.toString());
        Assertions.assertEquals(((ResponseDto) response.getBody()).getStatusCode(), HttpStatus.CREATED.toString());
    }
//    @Test
//    @DisplayName("Test updateProduct Success")
//    void testUpdateProduct() {
//    	
//    	var productDto =  new ProductDto("1", "title", "desc","image" ,"20");
//    	var savedProduct =  new ProductDto("1", productDto.getTitle(), productDto.getDescription(), productDto.getImage() ,productDto.getPrice());
//
//    	when(service.updateProduct(any())).thenReturn(savedProduct);
//
//        // Execute the service call
//        var response = controller.put(productDto.getId(), productDto);
//
//        // Assert the response
//        Assertions.assertNotNull(response, "Unable to update Product");
//        Assertions.assertEquals(response.getId(), "1");
//    }
//    
//    @Test
//    @DisplayName("Test deleteById Success")
//    void testDeleteById() {   
//        // Execute the service call
//    	when(service.deleteProduct("1")).thenReturn(true);
//        var response = controller.delete("1");
//        // Assert the response
//        Assertions.assertTrue(response, "No product found");
//    }   
    
}