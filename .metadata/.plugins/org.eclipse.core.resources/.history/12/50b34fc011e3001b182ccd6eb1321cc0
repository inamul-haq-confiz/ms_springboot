package com.test.demo.services;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;

import com.test.demo.constants.Messages;
import com.test.demo.dtos.ProductDto;
import com.test.demo.dtos.UserDto;
import com.test.demo.model.Product;
import com.test.demo.model.User;
import com.test.demo.repository.ProductRepository;
import com.test.demo.repository.UserRepository;

@SpringBootTest
public class AccountsServiceTests {
   
    @Autowired
    private AccountsService service;
    @MockBean
    private BCryptPasswordEncoder bCryptPasswordEncoder;
    @MockBean
    private UserRepository repository;   
   
    
    @Test
    @DisplayName("Test register Success")
    void testRegister() {
    	var user =  new UserDto("username", "password", "fullname");
    	when(repository.findByUsername(any())).thenReturn(null);
    	when(bCryptPasswordEncoder.encode(any())).thenReturn(any());
    	
        // Execute the service call
        var response = service.register(user);
        
        // Assert the response
        Assertions.assertTrue(response);
    }
    
    
    @Test
    @DisplayName("Test register Duplicate User")
    void testRegisterDuplicateUser() {
    	var user =  new UserDto("username", "password", "fullname");
    	var savedUser = new User("id","username", "password", "fullname");
    	when(repository.findByUsername(any())).thenReturn(savedUser);
    	
        // Execute the service call
    	 var exception = assertThrows(RuntimeException.class, () -> service.register(user));
         
        // Assert the response
        Assertions.assertTrue(response);
    }
    @Test
    @DisplayName("Test getById Success")
    void testGetById() {
    	var product =  Optional.of(new Product("1", "title", "desc","image" ,"20"));
    	when(repository.findById("1")).thenReturn(product);

        // Execute the service call
        var response = service.getProduct("1");

        // Assert the response
        Assertions.assertNotNull(response, "No product found");
    }
    
    @Test
    @DisplayName("Test getById Invalid")
    void testGetByIdInvalid() {
    	when(repository.findById("1")).thenReturn(null);

        // Execute the service call
        var exception = assertThrows(RuntimeException.class, () -> {
            service.getProduct("1");
            });
        // Assert the response
        Assertions.assertTrue(exception.getMessage() == Messages.PRODUCT_NOT_FOUND);
    }
    
  
    @Test
    @DisplayName("Test addProduct Success")
    void testAddProduct() {
    	
    	var productDto =  new ProductDto("0", "title", "desc","image" ,"20");
    	var savedProduct =  new Product("1", productDto.getTitle(), productDto.getDescription(), productDto.getImage() ,productDto.getPrice());

    	when(repository.save(any())).thenReturn(savedProduct);

        // Execute the service call
        var response = service.addProduct(productDto);

        // Assert the response
        Assertions.assertNotNull(response, "Unable to insert Product");
        Assertions.assertEquals(response.getId(), "1");

    }
    @Test
    @DisplayName("Test updateProduct Success")
    void testUpdateProduct() {
    	
    	var productDto =  new ProductDto("1", "title", "desc","image" ,"20");
    	var savedProduct =  new Product("1", productDto.getTitle(), productDto.getDescription(), productDto.getImage() ,productDto.getPrice());

    	when(repository.save(any())).thenReturn(savedProduct);

        // Execute the service call
        var response = service.updateProduct(productDto);

        // Assert the response
        Assertions.assertNotNull(response, "Unable to update Product");
        Assertions.assertEquals(response.getId(), "1");
    }
    
    @Test
    @DisplayName("Test deleteById Success")
    void testDeleteById() {   
        // Execute the service call
    	var product =  Optional.of(new Product("1", "title", "desc","image" ,"20"));
    	when(repository.findById("1")).thenReturn(product);
        var response = service.deleteProduct("1");
        // Assert the response
        Assertions.assertTrue(response, "No product found");
    }
    
    @Test
    @DisplayName("Test deleteById Invalid")
    void testDeleteByIdInvalid() {   
    	when(repository.findById("1")).thenReturn(null);
        // Execute the service call
        var exception = assertThrows(RuntimeException.class, () -> service.deleteProduct("1"));
        // Assert the response
        Assertions.assertEquals(exception.getMessage(), Messages.PRODUCT_NOT_FOUND);
    }
}